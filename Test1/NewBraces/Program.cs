using System;
using System.Collections.Generic;
using System.Linq;

namespace NewBraces
{
    class Program
    {
        static void Main(string[] args)
        {
            var expressions = new List<string>();
            expressions.Add("[()][{}()][](){}([{}(())([[{}]])][])[]([][])(){}{{}{[](){}}}()[]({})[{}{{}([{}][])}]");
            expressions.Add("[()][{}[{}[{}]]][]{}[]{}[]{{}({}(){({{}{}[([[]][[]])()]})({}{{}})})}");
            expressions.Add("(])[{{{][)[)])(]){(}))[{(})][[{)(}){[(]})[[{}(])}({)(}[[()}{}}]{}{}}()}{({}](]{{[}}(([{]");
            expressions.Add("){[]()})}}]{}[}}})}{]{](]](()][{))])(}]}))(}[}{{)}{[[}[]");
            expressions.Add("}(]}){");
            expressions.Add("((]()(]([({]}({[)){}}[}({[{])(]{()[]}}{)}}]]{({)[}{(");
            expressions.Add("{}{({{}})}[][{{}}]{}{}(){{}[]}{}([[][{}]]())");
            expressions.Add("(){}[()[][]]{}(())()[[([])][()]{}{}(({}[]()))()[()[{()}]][]]");
            expressions.Add("()([]({}[]){}){}{()}[]{}[]()(()([[]]()))()()()[]()(){{}}()({[{}][]}[[{{}({({({})})})}]])");
            expressions.Add("[]([{][][)(])}()([}[}(})}])}))]](}{}})[]({{}}))[])(}}[[{]{}]()[(][])}({]{}[[))[[}[}{(]})()){{(]]){][");
            expressions.Add("{()({}[[{}]]()(){[{{}{[[{}]{}((({[]}{}()[])))]((()()))}(()[[[]]])((()[[](({([])()}))[]]))}]})}");
            expressions.Add("()(){{}}[()()]{}{}");
            expressions.Add("{}()([[]])({}){({[][[][[()]]{{}[[]()]}]})}[](())((())[{{}}])");
            expressions.Add("{}(((){}){[]{{()()}}()})[]{{()}{(){()(){}}}}{()}({()(()({}{}()((()((([])){[][{()}{}]})))))})");
            expressions.Add("][[{)())))}[)}}}}[{){}()]([][]){{{{{[)}]]{([{)()][({}[){]({{");
            expressions.Add("{{}(");
            expressions.Add("{[{((({}{({({()})()})[]({()[[][][]]}){}}))){}}]}{}{({((){{}[][]{}[][]{}}[{}])(())}[][])}");
            expressions.Add("()[[][()[]][]()](([[[(){()[[]](([]))}]]]))");
            expressions.Add("()[]({}{})(()){{{}}()()}({[]()}())[](){}(({()}[{}[{({{}}){({}){({})((({()})))}}}]]))");
            expressions.Add("}[{){({}({)})]([}{[}}{[(([])[(}){[]])([]]}(]]]]{][");
            expressions.Add("[{]{[{(){[}{}(([(]}])(){[[}(]){(})))}}{{)}}{}][({(}))]}({)");
            expressions.Add(")})[(]{][[())]{[]{{}}[)[)}[]){}](}({](}}}[}{({()]]");
            expressions.Add("[[[({[]}({[][[[[][[{(()[][])}()[][]][]{}]]]]}))][(()){}]]]()[{}([]{}){}{{}}]");
            expressions.Add("({[]({[]})}())[][{}[{{(({{{([{}])}}}))}}]]");
            expressions.Add("([((()))()])[][][]{}()(([]))[]()[]((){}[]){}(){{}[]}[[{[]}]]");
            expressions.Add("[[(((({}{[]{}()}){}{{}}){({[]{[{}]{(){}(((){()}))}()}}[[]]()()[()])[[{}{}]()]}))]]{}[]{}({({{}})})");
            expressions.Add("(]{()}((");
            expressions.Add("[][(())[({{{()[]}}{[[][[][[[]{{{[()]{{{{}{[]}[][]}}}}}}]]]]}})]]");
            expressions.Add("}[})})}[)]{}{)");
            expressions.Add("({(}{})))}(}[)[}{)}}[)[{][{(}{{}]({}{[(})[{[({{[}{(]]})}");
            expressions.Add("]}})[]))]{][])[}(])]({[]}[]([)");
            expressions.Add("[{{}{[{{[}[[}([]");
            expressions.Add("[([]){}][({})({[(([])[][])][[{}{([{{}{(()){{{({}{{}}())}}[]}}()[()[{{{([](()){[[[]]]})}}}]]}])}]]})]");
            expressions.Add("]{}{(}))}](})[{]]()(]([}]([}][}{]{[])}{{{]([][()){{})[{({{{[}{}](]}}");
            expressions.Add("{[{}}){(}[][)(}[}][)({[[{]}[(()[}}){}{)([)]}(()))]{)(}}}][");
            expressions.Add("(]{}{(}}}[)[");
            expressions.Add("[]{}{[[]]}([{}]{}[]){{(())}}");
            expressions.Add("[)([{(][(){)[)}{)]]}}([((][[}}(]{}]]}]][(({{{))[[){}{]][))[]{]][)[{{}{()]){)])))){{{[(]}[}}{}]");
            expressions.Add("{({(){[[[][]{}[[([]{})]{}]][[]()()]]}})}[{}{{}}]");
            expressions.Add(")}][(})){))[{}[}");
            expressions.Add("{[]{({]}[}}[{([([)([){{}{(}}[]}}[[{[}[[()(])[}[]");
            expressions.Add("()()()[]");
            expressions.Add("((){}])][]][}{]{)]]}][{]}[)(])[}[({(");
            expressions.Add(")[((])(]]]]((]){{{{())]}]}(}{([}(({}]])[[{){[}]{{}})[){(");
            expressions.Add("}][[{[((}{[]){}}[[[)({[)}]]}(]]{[)[]}{}(){}}][{()]))})]][(((}}");
            expressions.Add("([]){}{{}{}}()([([{}{[[]()([(([]()))()[[]]])]}])])");
            expressions.Add("[()[[]{{[]}()([])}[]][][]][]()[]{}{}[][]{}{}[()(){}]");
            expressions.Add("{[{){]({(((({](]{([])([{{([])[}(){(]](]{[{[]}}())[){})}))[{})))[");
            expressions.Add("{}[()[]][]{}{}[[{{[[({})]()[[()]]]}}]]");
            expressions.Add("{[{}[][]]}[((()))][]({})[]{}{()}");
            expressions.Add("(){[{({})}]}");
            expressions.Add("([]])][{)]({)[]))}]())[}]))][}{(}}})){]}]{[)}(][})[[");
            expressions.Add("((({{}(([{}(())]))[()]{[[[]()]]}})))");
            expressions.Add("}()))}(}]]{{})}][{](]][{]{[[]]]}]]}([)({([))[[(]}])}[}(([{)[)]]([[](]}]}{]{{})[]){]}{])(");
            expressions.Add("{}{}{}{[[()]][]}");
            expressions.Add(")]}]({{})[[[{]{{{}}][))]{{");
            expressions.Add("))){({}])}])}}]{)()(}(]}([");
            expressions.Add("([[]][])[[]()][]()(([[]]{[()[]{[][{}]}[()]]{}{[]}}{{}()}(()[([][]{})[[{}][]]{}[]])))");
            expressions.Add("(]{[({}[){)))}]{[{}][({[({[]))}[}]}{()(([]{]()}})}[]{[)](((]]])([]}}]){)(([]]}[[}[");
            expressions.Add("([[]])({}(([(){{}[{}]}]){[{}]}))[][{}{}](){}");
            expressions.Add("[][][][][][([])][]{({()}[[()()]{([(){[]{}}{(())}{[](){}()({}())}[({}[[]()])][]])}])}");
            expressions.Add("}[{{(}})}}(((())()({]{([]((][(({)[({[]]}[])}]{][{{}]{)][}(])}}}))}}}");
            expressions.Add("[]({})()[]{}{}[]({}{})[]{([])()[()][{()({})[{}{[[()]{}[]][]}(({{[]{()()()}{}[]()}[]}){{}{}})]}]}");
            expressions.Add("{{(([{)]{}({][{](){({([[[][)}[)})(");
            expressions.Add("[{}]{[()({[{}]})]}");
            expressions.Add("[[{}]]");
            expressions.Add("]{{({[{]}[[)]]}{}))}{){({]]}{]([)({{[]){)]{}){){}()})(]]{{])(])[]}][[()()}");
            expressions.Add("{[([}[[{{(]]][}()())]{){(){)]]){})}]{][][(}[]())[}[)})})[][{[)[})()][]))}[[}");
            expressions.Add("]()])}[}}}{]]{)[}(}]]])])}{(}{([{]({)]}])(})[{}[)]])]}[]{{)){}{()}]}((}}{({])[}])[]}");
            expressions.Add("(]}[{}{{][}))){{{([)([[])([]{[");
            expressions.Add("{(()[]){}}(){[]}({{}(()())})([]){}{}(())()[()]{}()");
            expressions.Add("{{}[{}[{}[]]]}{}({{[]}})[[(){}][]]{}(([]{[][]()()}{{{()()}{[]}({}[]{()})}{()}[[]][()]}))");
            expressions.Add("{[][]}[{}[](){}]{{}{[][{}]}}");
            expressions.Add("()(){}(){((){}[])([[]]())}");
            expressions.Add("{}[[{[((}[(}[[]{{]([(}]][[");
            expressions.Add("{}[([{[{{}()}]{}}([[{}[]]({}{{()}[][][]})])])]");
            expressions.Add("{[](}([)(])[]]})()]){[({]}{{{)({}(][{{[}}(]{");
            expressions.Add("[][]{{}[](())}{}({[()]}())[][[][({}([{}]))]]");
            expressions.Add("((()))[]{[(()({[()({[]}{})]}))]}{[]}{{({}{})[{}{}]{()([()])[{()}()[[]{}()]{}{}[]()]}[[]{[]}([])]}}");
            foreach (var expression in expressions)
            {
                Console.WriteLine(brackets(expression));
            }

            Console.ReadLine();
        }

        static string brackets(string expression)
        {
            var openBraces = new[] { '{', '(', '[' };
            var closeBraces = new[] { '}', ')', ']' };

            char[] expressionArray = expression.ToCharArray();
            var stack = new Stack<char>();
            bool isBalanced = !closeBraces.Contains(expressionArray[0]);
            if (expressionArray.Length % 2 > 0)
            {
                isBalanced = false;
            }
            if (isBalanced)
            {
                for (var i = 0; i < expressionArray.Length; i++)
                {
                    var isOpenBrace = openBraces.Contains(expressionArray[i]);
                    if (isOpenBrace)
                    {
                        stack.Push(expressionArray[i]);
                    }
                    else
                    {
                        if (stack.Count < 1)
                        {
                            isBalanced = false;
                            break;
                        }

                        switch (expressionArray[i])
                        {
                            case '}':
                                if (stack.Pop() != '{')
                                    isBalanced = false;
                                break;
                            case ')':
                                if (stack.Pop() != '(')
                                    isBalanced = false;
                                break;
                            case ']':
                                if (stack.Pop() != '[')
                                    isBalanced = false;
                                break;
                            default:
                                isBalanced = false;
                                break;
                        }
                    }
                    if (isBalanced == false)
                        break;
                }
            }

            if (stack.Count > 0)
            {
                isBalanced = false;
            }

            return isBalanced ? "YES" : "NO";
        }
    }
}
